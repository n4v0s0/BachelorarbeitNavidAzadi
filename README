(Folgende befehle alle im geclonten Repository ausführen)
Aufruf-ReihenFolge:
1. bash install_dependencies.sh
2. python3 compile.py
3. python3 getNgrams.py N                 <- N = parameter der besagt was für N-Grams man will
4. python3 getTfidf.py
5. python3 makeMlTables.py
6. python3 crossVal.py
7. python3 randomForest.py


#############
Der hier gezeigte Ablauf wurde auf einer Virtual Machine mit Ubuntu 20.04
erfolgreich getestet. 
#############

getTfidf.py:
muss im selben ordner ausgeführt werden in dem sich "outputNgram", also der Ordner mit den NGRAM-Dateien befindet
-> erstellt im selben Ordner in dem tf_idf.py sich befindet einen Ausgabe-Ordner in dem die TFIDF-Dateien der Optimierungen sich befinden

getNgrams.py:
muss im selben ordner ausgeführt werden in dem sich "binaries" befindet, also der Ordner in dem die Unterordner mit den jeweils unterschiedlich optimierten Binaries befindet
braucht im selben ordner "asm_instructions.txt"
kriegt als erstes argument N für N-Grams
-> erstellt Ordner "outputNgram" in dem sich die N-Gram Dateien der jeweiligen Binaries in unterordnern der optimierungen befinden

compile.py:
muss im selben Ordner ausgeführt werden in dem sich "optimization_flags.txt" und das geklonte coreutils repository befindet
-> erstellt im selben ordner einen ordner "binaries" in dem für jede optimierung unterordner erstellt werden in welche die binaries verschoben werden


crossVal.py:
muss im selben Ordner ausgeführt werden in dem sich "ML_Tabellen" befindet.
berechnet anhand der aktuellen Daten in "ML_Tabellen" Kreuzvalidierungswerte für Naive Bayes, Decision Tree und Random Forest Klassifzierer. Erzeugt ein Matplot Fenster, dass manuell gespeichert werden kann.

randomForest.py
muss im selben Ordner ausgeführt werden in dem sich "ML_Tabellen" befindet.
berechnet anhand der Daten in "ML_Tabellen" die Accuracy, recall, precision und f1 Werte für einen RandomForest Klassifizierer. Speichert Balken-Diagramme in "ML-Diagramme". Speicher für jede Optimierung Konfusionsmatrize in Unterordner von ML_Tabellen

makeMlTables.py:
muss im selben Ordner ausgeführt werden in dem sich "tfidfOutput" befindet.
erstellt für jede Optimierung eine Tabelle, welche von den Machine-Learning Klassifizieren als Input-Data verwendet wird. Speichert diese in "ML_Tabellen"

